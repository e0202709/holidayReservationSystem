
package ws.client.partner;

import java.math.BigDecimal;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PartnerWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PartnerWebService {


    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "persist", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.Persist")
    @ResponseWrapper(localName = "persistResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.PersistResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/persistRequest", output = "http://ws.session.ejb/PartnerWebService/persistResponse")
    public void persist(
        @WebParam(name = "arg0", targetNamespace = "")
        Object arg0);

    /**
     * 
     * @param bookingId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws BookingNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrievePartnerReservationDetails", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrievePartnerReservationDetails")
    @ResponseWrapper(localName = "retrievePartnerReservationDetailsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrievePartnerReservationDetailsResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationDetailsRequest", output = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationDetailsResponse", fault = {
        @FaultAction(className = BookingNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationDetails/Fault/BookingNotFoundException")
    })
    public List<String> retrievePartnerReservationDetails(
        @WebParam(name = "bookingId", targetNamespace = "")
        Long bookingId)
        throws BookingNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param roomTypeName
     * @param username
     * @return
     *     returns ws.client.partner.RoomTypeEntity
     * @throws RoomTypeNotFoundException_Exception
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveRoomTypeEntityByRoomTypeName", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrieveRoomTypeEntityByRoomTypeName")
    @ResponseWrapper(localName = "retrieveRoomTypeEntityByRoomTypeNameResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrieveRoomTypeEntityByRoomTypeNameResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrieveRoomTypeEntityByRoomTypeNameRequest", output = "http://ws.session.ejb/PartnerWebService/retrieveRoomTypeEntityByRoomTypeNameResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrieveRoomTypeEntityByRoomTypeName/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = RoomTypeNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrieveRoomTypeEntityByRoomTypeName/Fault/RoomTypeNotFoundException")
    })
    public RoomTypeEntity retrieveRoomTypeEntityByRoomTypeName(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "roomTypeName", targetNamespace = "")
        String roomTypeName)
        throws InvalidLoginCredentialException_Exception, RoomTypeNotFoundException_Exception
    ;

    /**
     * 
     * @param partnerName
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws PartnerNotFoundException_Exception
     * @throws BookingNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAllPartnerReservationDetails", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrieveAllPartnerReservationDetails")
    @ResponseWrapper(localName = "retrieveAllPartnerReservationDetailsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrieveAllPartnerReservationDetailsResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrieveAllPartnerReservationDetailsRequest", output = "http://ws.session.ejb/PartnerWebService/retrieveAllPartnerReservationDetailsResponse", fault = {
        @FaultAction(className = BookingNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrieveAllPartnerReservationDetails/Fault/BookingNotFoundException"),
        @FaultAction(className = PartnerNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrieveAllPartnerReservationDetails/Fault/PartnerNotFoundException")
    })
    public List<String> retrieveAllPartnerReservationDetails(
        @WebParam(name = "partnerName", targetNamespace = "")
        String partnerName)
        throws BookingNotFoundException_Exception, PartnerNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns ws.client.partner.PartnerEntity
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "partnerLogin", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.PartnerLogin")
    @ResponseWrapper(localName = "partnerLoginResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.PartnerLoginResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/partnerLoginRequest", output = "http://ws.session.ejb/PartnerWebService/partnerLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/partnerLogin/Fault/InvalidLoginCredentialException")
    })
    public PartnerEntity partnerLogin(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.math.BigDecimal
     * @throws RoomRateNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrievePublishedRoomRate", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrievePublishedRoomRate")
    @ResponseWrapper(localName = "retrievePublishedRoomRateResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrievePublishedRoomRateResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrievePublishedRoomRateRequest", output = "http://ws.session.ejb/PartnerWebService/retrievePublishedRoomRateResponse", fault = {
        @FaultAction(className = RoomRateNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrievePublishedRoomRate/Fault/RoomRateNotFoundException")
    })
    public BigDecimal retrievePublishedRoomRate(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws RoomRateNotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<ws.client.partner.RoomTypeEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAllRoomTypes", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrieveAllRoomTypes")
    @ResponseWrapper(localName = "retrieveAllRoomTypesResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.RetrieveAllRoomTypesResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrieveAllRoomTypesRequest", output = "http://ws.session.ejb/PartnerWebService/retrieveAllRoomTypesResponse")
    public List<RoomTypeEntity> retrieveAllRoomTypes();

    /**
     * 
     * @param password
     * @param checkOutDate
     * @param remoteCheckoutLineItems
     * @param checkInDate
     * @param guestThatWantToBookTheRoom
     * @param username
     * @return
     *     returns java.lang.Long
     * @throws InvalidLoginCredentialException_Exception
     * @throws CreateNewBookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "clientStateRemoteCheckout", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.ClientStateRemoteCheckout")
    @ResponseWrapper(localName = "clientStateRemoteCheckoutResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.ClientStateRemoteCheckoutResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/clientStateRemoteCheckoutRequest", output = "http://ws.session.ejb/PartnerWebService/clientStateRemoteCheckoutResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/clientStateRemoteCheckout/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = CreateNewBookingException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/clientStateRemoteCheckout/Fault/CreateNewBookingException")
    })
    public Long clientStateRemoteCheckout(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "guestThatWantToBookTheRoom", targetNamespace = "")
        String guestThatWantToBookTheRoom,
        @WebParam(name = "checkInDate", targetNamespace = "")
        String checkInDate,
        @WebParam(name = "checkOutDate", targetNamespace = "")
        String checkOutDate,
        @WebParam(name = "remoteCheckoutLineItems", targetNamespace = "")
        List<RemoteCheckoutLineItem> remoteCheckoutLineItems)
        throws CreateNewBookingException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param endDate
     * @param roomTypeName
     * @param startDate
     * @return
     *     returns int
     * @throws RoomTypeNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchHotelRoom", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.SearchHotelRoom")
    @ResponseWrapper(localName = "searchHotelRoomResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.partner.SearchHotelRoomResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/searchHotelRoomRequest", output = "http://ws.session.ejb/PartnerWebService/searchHotelRoomResponse", fault = {
        @FaultAction(className = RoomTypeNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/searchHotelRoom/Fault/RoomTypeNotFoundException")
    })
    public int searchHotelRoom(
        @WebParam(name = "roomTypeName", targetNamespace = "")
        String roomTypeName,
        @WebParam(name = "startDate", targetNamespace = "")
        String startDate,
        @WebParam(name = "endDate", targetNamespace = "")
        String endDate)
        throws RoomTypeNotFoundException_Exception
    ;

}
